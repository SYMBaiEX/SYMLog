# SYMLog Platform Architecture

## Overview
SYMLog is a modern monorepo platform built with Next.js 15, Tauri 2, and Convex backend. This document defines the architectural patterns and best practices for the entire platform.

## Platform Structure

### Monorepo Architecture
```
SYMLog/
├── apps/
│   ├── web/                    # Main Next.js web application
│   ├── auth-web/               # Authentication web application
│   └── fumadocs/              # Documentation site
├── packages/
│   └── backend/               # Convex backend functions
├── .cursor/rules/             # Cursor IDE rules
├── .github/                   # CI/CD workflows
└── turbo.json                 # Turborepo configuration
```

### Application Architecture

#### Web Application (apps/web)
- **Framework**: Next.js 15 with App Router
- **Styling**: Tailwind CSS 4 with custom glass morphism
- **UI Components**: Radix UI + shadcn/ui
- **State Management**: Convex reactive backend
- **Authentication**: Web3 wallet integration (Solana/Phantom/Crossmint)
- **Desktop**: Tauri 2 native desktop app
- **PWA**: Progressive Web App support

#### Authentication Application (apps/auth-web)
- **Framework**: Next.js 15 with App Router
- **Purpose**: Dedicated authentication service
- **Port**: 3003 (separate from main web app)
- **Features**: Crossmint integration, wallet authentication

#### Backend (packages/backend)
- **Framework**: Convex reactive database
- **Language**: TypeScript
- **Features**: Real-time data synchronization, type-safe API

## Development Patterns

### Component Architecture
- **Atomic Design**: Components follow atomic design principles
- **Composition**: Prefer composition over inheritance
- **Type Safety**: Full TypeScript support with strict configuration
- **Accessibility**: WCAG 2.1 AA compliance

### File Organization
```
src/
├── app/                    # Next.js App Router pages
│   ├── layout.tsx         # Root layout
│   ├── page.tsx           # Home page
│   ├── contact/           # Contact page
│   ├── research/          # Research page
│   ├── blog/              # Blog page
│   └── api/               # API routes
├── components/            # Reusable components
│   ├── ui/               # Base UI components (shadcn/ui)
│   ├── providers/        # Context providers
│   └── [feature]/        # Feature-specific components
├── hooks/                # Custom React hooks
├── lib/                  # Utility functions
└── types/                # TypeScript type definitions
```

### Naming Conventions
- **Files**: kebab-case (e.g., `glass-button.tsx`)
- **Components**: PascalCase (e.g., `GlassButton`)
- **Hooks**: camelCase with `use` prefix (e.g., `useTauriMenu`)
- **Types**: PascalCase with descriptive names (e.g., `UserProfile`)
- **Constants**: UPPER_SNAKE_CASE (e.g., `API_ENDPOINTS`)

## Technology Stack

### Frontend Technologies
- **Next.js**: 15.3.0 (App Router, Turbopack)
- **React**: 19.0.0 (Latest features)
- **TypeScript**: 5.x (Strict configuration)
- **Tailwind CSS**: 4.1.10 (Utility-first styling)
- **Radix UI**: Latest (Accessible components)
- **shadcn/ui**: Latest (Component library)

### Backend Technologies
- **Convex**: 1.25.4 (Reactive database)
- **TypeScript**: 5.x (Type safety)

### Desktop Technologies
- **Tauri**: 2.4.0 (Native desktop app)
- **Rust**: 1.77.2+ (Backend language)

### Development Tools
- **Bun**: 1.2.18 (Package manager)
- **Turborepo**: 2.5.4 (Monorepo build system)
- **Biome**: Latest (Linting and formatting)
- **Ultracite**: Latest (Code quality)

## Best Practices

### Code Quality
1. **Type Safety**: Always use TypeScript with strict configuration
2. **Linting**: Follow Biome + Ultracite rules
3. **Formatting**: Automatic code formatting on save
4. **Testing**: Write tests for critical functionality
5. **Documentation**: Document complex logic and APIs

### Performance
1. **Bundle Size**: Keep components small and focused
2. **Lazy Loading**: Use dynamic imports for large components
3. **Image Optimization**: Use Next.js Image component
4. **Caching**: Implement proper caching strategies
5. **Code Splitting**: Leverage Next.js automatic code splitting

### Security
1. **Environment Variables**: Never commit sensitive data
2. **Input Validation**: Validate all user inputs
3. **Authentication**: Use secure Web3 authentication
4. **CSP**: Implement Content Security Policy
5. **HTTPS**: Always use HTTPS in production

### Accessibility
1. **Semantic HTML**: Use proper HTML elements
2. **ARIA Labels**: Provide descriptive labels
3. **Keyboard Navigation**: Ensure keyboard accessibility
4. **Color Contrast**: Maintain proper color contrast
5. **Screen Readers**: Test with screen readers

## Development Workflow

### Setup
1. Install dependencies: `bun install`
2. Setup Convex: `bun dev:setup`
3. Start development: `bun dev`

### Commands
- `bun dev`: Start all applications
- `bun dev:web`: Start web application only
- `bun dev:server`: Start backend only
- `bun build`: Build all applications
- `bun check-types`: Check TypeScript types
- `bun check`: Run linter and formatter

### Desktop Development
- `cd apps/web && bun desktop:dev`: Start Tauri development
- `cd apps/web && bun desktop:build`: Build desktop app

## Environment Configuration

### Required Environment Variables
```env
# Convex Configuration
NEXT_PUBLIC_CONVEX_URL=your_convex_url_here

# Web3 Configuration (Optional)
NEXT_PUBLIC_CROSSMINT_CLIENT_KEY=your_crossmint_key_here
NEXT_PUBLIC_SOLANA_RPC_URL=https://api.mainnet-beta.solana.com
```

### Development Ports
- **Web App**: http://localhost:3001
- **Auth App**: http://localhost:3003
- **Desktop**: Native app with Tauri

## Deployment Strategy

### Web Application
- **Platform**: Vercel (recommended) or similar
- **Build Command**: `bun build`
- **Output Directory**: `.next`
- **Environment**: Production environment variables

### Desktop Application
- **Platform**: Cross-platform (Windows, macOS, Linux)
- **Build Command**: `bun desktop:build`
- **Output**: Native binaries in `src-tauri/target/release`

### Backend
- **Platform**: Convex Cloud
- **Deployment**: Automatic with Convex CLI
- **Environment**: Production environment variables

## Monitoring and Analytics

### Performance Monitoring
- **Web Vitals**: Monitor Core Web Vitals
- **Bundle Analysis**: Regular bundle size analysis
- **Error Tracking**: Implement error tracking
- **User Analytics**: Track user interactions

### Security Monitoring
- **Vulnerability Scanning**: Regular dependency scans
- **Security Audits**: Periodic security reviews
- **Access Logs**: Monitor authentication attempts
- **Error Logs**: Track security-related errors

## Future Considerations

### Scalability
- **Microservices**: Consider breaking into microservices
- **CDN**: Implement global CDN for assets
- **Database**: Plan for database scaling
- **Caching**: Implement Redis or similar

### Features
- **Mobile App**: Consider React Native or Flutter
- **API Gateway**: Implement API gateway
- **Real-time**: Enhance real-time capabilities
- **AI Integration**: Plan for AI features

### Maintenance
- **Dependency Updates**: Regular security updates
- **Code Reviews**: Implement code review process
- **Documentation**: Keep documentation updated
- **Testing**: Expand test coverage
description:
globs:
alwaysApply: false
---
