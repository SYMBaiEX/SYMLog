# Next.js Development Rules

## App Router Architecture

### File Conventions

- **layout.tsx**: Root and nested layouts
- **page.tsx**: Route segments and pages
- **loading.tsx**: Loading UI for route segments
- **error.tsx**: Error UI for route segments
- **not-found.tsx**: Not found UI
- **route.ts**: API endpoints
- **template.tsx**: Re-rendered layouts

### Layout Structure

```tsx
// Root layout (app/layout.tsx)
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>
        <Providers>
          <Navigation />
          <main>{children}</main>
          <Footer />
        </Providers>
      </body>
    </html>
  );
}
```

### Page Components

```tsx
// Server Component (default)
export default async function Page() {
  const data = await fetchData();
  return <div>{data}</div>;
}

// Client Component (when needed)
("use client");
export default function ClientPage() {
  const [state, setState] = useState();
  return <div>{state}</div>;
}
```

## Component Patterns

### Server vs Client Components

- **Default**: Server Components for better performance
- **Client Components**: Only when needed for interactivity
- **Pattern**: Keep client components as small as possible

### Component Organization

```
components/
├── ui/                    # Base UI components (shadcn/ui)
│   ├── button.tsx
│   ├── card.tsx
│   └── dialog.tsx
├── providers/             # Context providers
│   ├── theme-provider.tsx
│   └── wallet-provider.tsx
├── layout/               # Layout components
│   ├── navigation.tsx
│   └── footer.tsx
└── features/             # Feature-specific components
    ├── auth/
    ├── blog/
    └── research/
```

### Custom Components

```tsx
// Glass morphism component example
interface GlassCardProps {
  children: React.ReactNode;
  className?: string;
  hover?: boolean;
  glow?: "periwinkle" | "green";
}

export function GlassCard({
  children,
  className,
  hover = false,
  glow,
}: GlassCardProps) {
  return (
    <div
      className={cn(
        "backdrop-blur-md bg-white/10 border border-white/20 rounded-lg",
        hover && "hover:bg-white/20 transition-colors",
        glow && `glow-${glow}`,
        className
      )}
    >
      {children}
    </div>
  );
}
```

## Data Fetching

### Server Components

```tsx
// Direct database queries in Server Components
import { api } from "@SYMLog/backend/convex/_generated/api";
import { useQuery } from "convex/react";

export default async function Page() {
  const data = await api.todos.getAll();
  return (
    <div>
      {data.map((item) => (
        <div key={item._id}>{item.text}</div>
      ))}
    </div>
  );
}
```

### Client Components

```tsx
// Client-side data fetching
"use client";
import { useQuery } from "convex/react";
import { api } from "@SYMLog/backend/convex/_generated/api";

export default function ClientComponent() {
  const data = useQuery(api.todos.getAll);

  if (!data) return <div>Loading...</div>;

  return (
    <div>
      {data.map((item) => (
        <div key={item._id}>{item.text}</div>
      ))}
    </div>
  );
}
```

## Routing Patterns

### Dynamic Routes

```tsx
// app/blog/[slug]/page.tsx
export default async function BlogPost({
  params,
}: {
  params: { slug: string };
}) {
  const post = await getBlogPost(params.slug);
  return <article>{post.content}</article>;
}
```

### Parallel Routes

```tsx
// app/@modal/(.)login/page.tsx
export default function LoginModal() {
  return (
    <div className="modal">
      <LoginForm />
    </div>
  );
}
```

### Route Groups

```tsx
// app/(marketing)/about/page.tsx
// app/(dashboard)/dashboard/page.tsx
```

## State Management

### Convex Integration

```tsx
// Real-time data with Convex
"use client";
import { useQuery, useMutation } from "convex/react";
import { api } from "@SYMLog/backend/convex/_generated/api";

export function TodoList() {
  const todos = useQuery(api.todos.getAll);
  const createTodo = useMutation(api.todos.create);

  const handleCreate = async (text: string) => {
    await createTodo({ text });
  };

  return (
    <div>{todos?.map((todo) => <div key={todo._id}>{todo.text}</div>)}</div>
  );
}
```

### Local State

```tsx
// Use React hooks for local state
"use client";
import { useState, useEffect } from "react";

export function LocalComponent() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    // Side effects
  }, [count]);

  return <button onClick={() => setCount((c) => c + 1)}>Count: {count}</button>;
}
```

## Styling Patterns

### Tailwind CSS

```tsx
// Utility-first styling
export function StyledComponent() {
  return (
    <div
      className="
      flex items-center justify-center
      min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100
      p-4 sm:p-6 lg:p-8
    "
    >
      <div
        className="
        max-w-md w-full
        bg-white/80 backdrop-blur-sm
        rounded-xl shadow-xl
        p-6 space-y-4
      "
      >
        <h1 className="text-2xl font-bold text-gray-900">Welcome</h1>
      </div>
    </div>
  );
}
```

### Custom CSS Classes

```css
/* globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer components {
  .glass-card {
    @apply backdrop-blur-md bg-white/10 border border-white/20 rounded-lg;
  }

  .gradient-text {
    @apply bg-gradient-to-r from-periwinkle to-light-green bg-clip-text text-transparent;
  }
}
```

## Performance Optimization

### Image Optimization

```tsx
import Image from "next/image";

export function OptimizedImage() {
  return (
    <Image
      src="/hero.jpg"
      alt="Hero image"
      width={1200}
      height={600}
      priority
      className="rounded-lg"
    />
  );
}
```

### Dynamic Imports

```tsx
import dynamic from "next/dynamic";

const HeavyComponent = dynamic(() => import("./HeavyComponent"), {
  loading: () => <div>Loading...</div>,
  ssr: false,
});

export function LazyComponent() {
  return <HeavyComponent />;
}
```

### Metadata

```tsx
import type { Metadata } from "next";

export const metadata: Metadata = {
  title: "SYMLog - Digital Platform",
  description: "Modern web and desktop application with Web3 integration",
  openGraph: {
    title: "SYMLog Platform",
    description: "Advanced digital platform",
  },
};
```

## Error Handling

### Error Boundaries

```tsx
// app/error.tsx
"use client";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen">
      <h2 className="text-2xl font-bold mb-4">Something went wrong!</h2>
      <button
        onClick={reset}
        className="px-4 py-2 bg-blue-500 text-white rounded"
      >
        Try again
      </button>
    </div>
  );
}
```

### Loading States

```tsx
// app/loading.tsx
export default function Loading() {
  return (
    <div className="flex items-center justify-center min-h-screen">
      <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500"></div>
    </div>
  );
}
```

## Security Best Practices

### Environment Variables

```tsx
// Only use NEXT_PUBLIC_ prefix for client-side variables
const apiKey = process.env.NEXT_PUBLIC_API_KEY; // ✅ Client-side
const secretKey = process.env.SECRET_KEY; // ✅ Server-side only
```

### Input Validation

```tsx
import { z } from "zod";

const formSchema = z.object({
  email: z.string().email(),
  password: z.string().min(8),
});

export function ValidatedForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
  });

  return <form>...</form>;
}
```

## Testing Patterns

### Component Testing

```tsx
// __tests__/components/GlassCard.test.tsx
import { render, screen } from "@testing-library/react";
import { GlassCard } from "@/components/ui/glass-card";

describe("GlassCard", () => {
  it("renders children correctly", () => {
    render(<GlassCard>Test content</GlassCard>);
    expect(screen.getByText("Test content")).toBeInTheDocument();
  });
});
```

### API Testing

```tsx
// __tests__/api/todos.test.ts
import { api } from "@SYMLog/backend/convex/_generated/api";

describe("Todos API", () => {
  it("creates a new todo", async () => {
    const result = await api.todos.create({ text: "Test todo" });
    expect(result).toBeDefined();
  });
});
```

## Deployment Considerations

### Build Optimization

```json
// next.config.ts
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  experimental: {
    turbo: {
      rules: {
        '*.svg': {
          loaders: ['@svgr/webpack'],
          as: '*.js',
        },
      },
    },
  },
  images: {
    formats: ['image/webp', 'image/avif'],
  },
}

export default nextConfig
```

### Environment Configuration

```env
# .env.local
NEXT_PUBLIC_CONVEX_URL=your_convex_url
NEXT_PUBLIC_APP_URL=http://localhost:3001
```

## Common Patterns

### Form Handling

```tsx
"use client";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

const formSchema = z.object({
  name: z.string().min(2),
  email: z.string().email(),
});

export function ContactForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
  });

  const onSubmit = async (data: z.infer<typeof formSchema>) => {
    // Handle form submission
  };

  return (
    <form onSubmit={form.handleSubmit(onSubmit)}>{/* Form fields */}</form>
  );
}
```

### Modal Dialogs

```tsx
"use client";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";

export function ModalDialog({
  open,
  onOpenChange,
  children,
}: {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  children: React.ReactNode;
}) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Modal Title</DialogTitle>
        </DialogHeader>
        {children}
      </DialogContent>
    </Dialog>
  );
}
```

description:
globs:
alwaysApply: false

---
